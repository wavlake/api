name: Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE: api

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.23.x

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

    - name: Run security scan
      uses: securego/gosec@master
      with:
        args: './...'

  deploy:
    runs-on: ubuntu-latest
    needs: test  # Only deploy if tests pass
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev

    - name: Build and Push Container
      run: |-
        docker build -t "$REGION-docker.pkg.dev/$PROJECT_ID/api-repo/$SERVICE:$GITHUB_SHA" --build-arg COMMIT_SHA=$GITHUB_SHA .
        docker push "$REGION-docker.pkg.dev/$PROJECT_ID/api-repo/$SERVICE:$GITHUB_SHA"

    - name: Deploy to Cloud Run
      run: |-
        gcloud run deploy $SERVICE \
          --image "$REGION-docker.pkg.dev/$PROJECT_ID/api-repo/$SERVICE:$GITHUB_SHA" \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars "COMMIT_SHA=$GITHUB_SHA,GOOGLE_CLOUD_PROJECT=$PROJECT_ID" \
          --service-account "api-service@$PROJECT_ID.iam.gserviceaccount.com"

    - name: Post-deployment health check
      run: |-
        # Wait for deployment to be ready
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$(gcloud run services describe $SERVICE --region=$REGION --format='value(status.url)')
        
        # Test heartbeat endpoint
        curl -f "$SERVICE_URL/heartbeat" | grep -q "ok" && echo "✅ Health check passed" || echo "❌ Health check failed"